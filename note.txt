
Test a gerer : 
echo '"'$USER'"'
$? | echo bonjour

Remplacer free_env_List par free_env

Proteger toute la libft

Expand

Test avc des quotes 

Signaux


mlavry@k1r4p12:Documents/Minishell ‹main*›$ bash 
mlavry@k1r4p12:~/Documents/Minishell$ echo '""""""$USER""""""""'
""""""$USER""""""""
mlavry@k1r4p12:~/Documents/Minishell$ echo '""""""$USER""""""""
> ^C
mlavry@k1r4p12:~/Documents/Minishell$ echo """"""$USER""""""""
mlavry
mlavry@k1r4p12:~/Documents/Minishell$ echo """"""$USER"""""""""
> ^C
mlavry@k1r4p12:~/Documents/Minishell$ echo "'""""""$USER""""""""''
> ^C
mlavry@k1r4p12:~/Documents/Minishell$ echo "'""""""$USER""""""""''"
'mlavry''
mlavry@k1r4p12:~/Documents/Minishell$ 

mlavry@k1r4p13:Documents/Minishell ‹main›$ ./minishell
minishell$ echo "'""""""$USER""""""""''"
'""""""$USER""""""""''
minishell$ echo "' """"""$USER"""""""" ''"
' """"""$USER"""""""" ''
minishell$ echo "' " """""$USER"""""""" ''"
'  """"$USER"""""""" ''
minishell$ echo "' " " " " " "$USER"""""""" ''"
'      $USER"""""""" ''
minishell$ 


Exemple de comment gerer les quotes multiples

mpanic


Truc erreur 

mlavry@k1r4p12:Documents/Minishell ‹main*›$ bash
mlavry@k1r4p12:~/Documents/Minishell$ $? | echo bonjour
bonjour
0: command not found
mlavry@k1r4p12:~/Documents/Minishell$ vjhADVB | echo bonjour
bonjour
vjhADVB: command not found
mlavry@k1r4p12:~/Documents/Minishell$ 
exit


/* char	**line_to_token(char *line)
{
	char	**tokens;
	int		pos[3];
	bool	sq;
	bool	dq;

	init_var(pos, &sq, &dq);
	tokens = malloc(sizeof(char *) * (count_tokens(line) + 1));
	if (!tokens)
		return (NULL);
	while (line[pos[1]])
	{
		quote_choice(&sq, &dq, line[pos[1]]);
		if (!sq && !dq)
		{
			if (handle_splitter(line, tokens, pos))
				continue ;
		}
		if (sq && line[pos[1]] == '\'')
        {
			if (pos[1] > pos[0])
				tokens[pos[2]++] = ft_substr(line, pos[0], pos[1] - pos[0]);
            pos[1]++;  // saute la quote ouvrante
            int start = pos[1];
            while (line[pos[1]] && line[pos[1]] != '\'')
                pos[1]++;
            tokens[pos[2]++] = ft_substr(line, start, pos[1] - start);
            if (line[pos[1]] == '\'')  // saute la quote fermante
                pos[1]++;
            pos[0] = pos[1];
            sq = false;  // on sort de la quote simple
            continue;
        }
		if (dq && line[pos[1]] == '"')
        {
			if (pos[1] > pos[0])
				tokens[pos[2]++] = ft_substr(line, pos[0], pos[1] - pos[0]);
            pos[1]++;
            int start = pos[1];
            while (line[pos[1]] && line[pos[1]] != '"')
                pos[1]++;
            tokens[pos[2]++] = ft_substr(line, start, pos[1] - start);
            if (line[pos[1]] == '"')
                pos[1]++;
            pos[0] = pos[1];
            dq = false;
            continue;
        }
		pos[1]++;
	}
	if (pos[1] > pos[0])
		tokens[pos[2]++] = ft_substr(line, pos[0], pos[1] - pos[0]);
	tokens[pos[2]] = NULL;
	return (tokens);
} */


int	count_tokens(char *line)
{
	int		start;
	int		i;
	int		count;
	bool	sq;
	bool	dq;

	start = 0;
	i = 0;
	count = 0;
	sq = false;
	dq = false;
	while (line[i])
	{
		quote_choice(&sq, &dq, line[i]);
		if (!sq && !dq)
		{
			if (space_and_operator_check(&start, &i, &count, line))
				continue ;
		}
		if (sq && line[i] == '\'')
        {
			if (i > start)
				count++;
            int s = ++i;                      // on saute la quote ouvrante
            while (line[i] && line[i] != '\'')
                i++;
            if (i > s) count++;               // on compte le contenu
            if (line[i] == '\'') i++;         // on saute la quote fermante
            start = i;
            continue ;
        }
		if (dq && line[i] == '"')
        {
			if (i > start)
				count++;
            int s = ++i;
            while (line[i] && line[i] != '"')
                i++;
            if (i > s) count++;
            if (line[i] == '"') i++;
            start = i;
            continue ;
        }
		i++;
	}
	if (i > start)
		count++;
	return (count);
}
